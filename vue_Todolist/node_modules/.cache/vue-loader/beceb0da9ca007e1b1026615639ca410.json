{"remainingRequest":"E:\\스터디\\study\\todolist-Basic01_JH\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\스터디\\study\\todolist-Basic01_JH\\src\\components\\Home.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\스터디\\study\\todolist-Basic01_JH\\src\\components\\Home.vue","mtime":1585901908000},{"path":"E:\\스터디\\study\\todolist-Basic01_JH\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1584076644000},{"path":"E:\\스터디\\study\\todolist-Basic01_JH\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\스터디\\study\\todolist-Basic01_JH\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1584076644000},{"path":"E:\\스터디\\study\\todolist-Basic01_JH\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport List from './List.vue'\r\nimport ListAdd from './ListAdd.vue'\r\n\r\nexport default {\r\n  components: {\r\n    List, \r\n    ListAdd\r\n  },\r\n  data() {\r\n    return {\r\n      todoList: [],\r\n      toDay: '',\r\n      nowTime:0\r\n    }\r\n  },\r\n  computed: {\r\n    countDone(){\r\n      let count = 0;\r\n      // this.todoList.forEach(list => {\r\n        // if( list.status === 'done') count++\r\n        for (let i = 0; i < this.todoList.length; i++) {\r\n          if(this.todoList[i].status === 'done') count++\r\n      }\r\n      return count;\r\n    }\r\n  },\r\n  methods: {\r\n    listTime(){ // 리스트를 추가, 수정 했을때 시간을 나타내주는 함수.\r\n      let hh = new Date().getHours().toString()\r\n      let mm = new Date().getMinutes().toString()\r\n      let ss = new Date().getSeconds().toString()\r\n\r\n      return this.nowTime = ` ${hh < 10 ? `0${hh}` : hh}:${mm < 10 ? `0${mm}` : mm}:${ss < 10 ? `0${ss}` : ss} `\r\n    },\r\n    listAdd(memo) {\r\n      // this.todoList.push({ memo: memo, status: \"created\" , mode: \"add\"})\r\n      this.todoList.push({ memo: memo, status: \"created\", mode: \"add\", display: 'block', star: 'none', time: this.listTime()})\r\n    },\r\n    statusControl(index, status){\r\n      this.todoList[index].status = status         /* todoList에서 몇번째 인자인지 찾아서 그거의 status가 스테터스 */\r\n    },\r\n    listDelete(index) {\r\n      this.todoList.splice(index, 1 )   /*  투두리스트에서 몇번째인지 찾아줘 */\r\n    },\r\n    listEdit(memo, index, mode, display){\r\n      this.todoList[index].memo = memo\r\n      this.todoList[index].mode= mode\r\n      // edit 이 되었을때 mode 값을 edit > add 로 바꿔줘야 하기 때문에 넘겨주는 mode 값.\r\n      this.todoList[index].time = this.listTime()\r\n\r\n      for (let i = 0; i < this.todoList.length; i++) {\r\n      this.todoList[i].display = display\r\n      }\r\n    },\r\n    //실시간으로 현재시간을 업데이트 해주는 함수.\r\n    resetTime(){\r\n      setInterval(()=>{\r\n        let date = new Date();\r\n        let month = date.getMonth();\r\n        let todayDate = date.getDate();\r\n        let day = date.getDay();\r\n        const week = ['일', '월', '화', '수', '목', '금', '토'];\r\n        let hours = date.getHours();\r\n        let minutes = date.getMinutes();\r\n        let seconds = date.getSeconds();\r\n        let toDate = `${month+1}월 ${todayDate}일 ${week[day]}요일 ` + `${hours < 10 ? `0${hours}` : hours}:${minutes < 10 ? `0${minutes }`  : minutes }:${seconds < 10 ? `0${seconds }`  : seconds }`\r\n        this.toDay = toDate\r\n        }, 1000); \r\n    }\r\n  }\r\n}\r\n",{"version":3,"sources":["Home.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Home.vue","sourceRoot":"src\\components","sourcesContent":["<template>\r\n<v-container>\r\n  <v-layout row wrap>\r\n    <v-flex xs12 text-xs-center>\r\n      <h1>Todo List</h1>\r\n      <p>전체 할일 : {{ todoList.length }}/ 완료된 할일: {{ countDone }}/ 남은 할일: {{ todoList.length - countDone }}</p>\r\n      <p :v-bind=\"resetTime()\">{{ toDay }}</p>\r\n    </v-flex>\r\n    <v-flex xs6 pa-2>\r\n        <!-- @statusControl신호가 오면 \"statusControl\"  실행해줘 -->\r\n      <List\r\n       :todoList=\"todoList\"\r\n       @statusControl = \"statusControl\"\r\n       @listDelete = \"listDelete\"\r\n      ></List>\r\n    </v-flex>\r\n    <v-flex xs6 pa-2>\r\n      <ListAdd\r\n        @listAdd = \"listAdd\"\r\n        @listEdit = \"listEdit\" \r\n      ></ListAdd>\r\n    </v-flex>\r\n  </v-layout>\r\n</v-container>\r\n</template>\r\n\r\n<script>\r\nimport List from './List.vue'\r\nimport ListAdd from './ListAdd.vue'\r\n\r\nexport default {\r\n  components: {\r\n    List, \r\n    ListAdd\r\n  },\r\n  data() {\r\n    return {\r\n      todoList: [],\r\n      toDay: '',\r\n      nowTime:0\r\n    }\r\n  },\r\n  computed: {\r\n    countDone(){\r\n      let count = 0;\r\n      // this.todoList.forEach(list => {\r\n        // if( list.status === 'done') count++\r\n        for (let i = 0; i < this.todoList.length; i++) {\r\n          if(this.todoList[i].status === 'done') count++\r\n      }\r\n      return count;\r\n    }\r\n  },\r\n  methods: {\r\n    listTime(){ // 리스트를 추가, 수정 했을때 시간을 나타내주는 함수.\r\n      let hh = new Date().getHours().toString()\r\n      let mm = new Date().getMinutes().toString()\r\n      let ss = new Date().getSeconds().toString()\r\n\r\n      return this.nowTime = ` ${hh < 10 ? `0${hh}` : hh}:${mm < 10 ? `0${mm}` : mm}:${ss < 10 ? `0${ss}` : ss} `\r\n    },\r\n    listAdd(memo) {\r\n      // this.todoList.push({ memo: memo, status: \"created\" , mode: \"add\"})\r\n      this.todoList.push({ memo: memo, status: \"created\", mode: \"add\", display: 'block', star: 'none', time: this.listTime()})\r\n    },\r\n    statusControl(index, status){\r\n      this.todoList[index].status = status         /* todoList에서 몇번째 인자인지 찾아서 그거의 status가 스테터스 */\r\n    },\r\n    listDelete(index) {\r\n      this.todoList.splice(index, 1 )   /*  투두리스트에서 몇번째인지 찾아줘 */\r\n    },\r\n    listEdit(memo, index, mode, display){\r\n      this.todoList[index].memo = memo\r\n      this.todoList[index].mode= mode\r\n      // edit 이 되었을때 mode 값을 edit > add 로 바꿔줘야 하기 때문에 넘겨주는 mode 값.\r\n      this.todoList[index].time = this.listTime()\r\n\r\n      for (let i = 0; i < this.todoList.length; i++) {\r\n      this.todoList[i].display = display\r\n      }\r\n    },\r\n    //실시간으로 현재시간을 업데이트 해주는 함수.\r\n    resetTime(){\r\n      setInterval(()=>{\r\n        let date = new Date();\r\n        let month = date.getMonth();\r\n        let todayDate = date.getDate();\r\n        let day = date.getDay();\r\n        const week = ['일', '월', '화', '수', '목', '금', '토'];\r\n        let hours = date.getHours();\r\n        let minutes = date.getMinutes();\r\n        let seconds = date.getSeconds();\r\n        let toDate = `${month+1}월 ${todayDate}일 ${week[day]}요일 ` + `${hours < 10 ? `0${hours}` : hours}:${minutes < 10 ? `0${minutes }`  : minutes }:${seconds < 10 ? `0${seconds }`  : seconds }`\r\n        this.toDay = toDate\r\n        }, 1000); \r\n    }\r\n  }\r\n}\r\n</script>"]}]}