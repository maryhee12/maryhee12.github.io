{"remainingRequest":"E:\\스터디\\study\\todolist-Basic01_JH\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\스터디\\study\\todolist-Basic01_JH\\src\\components\\List.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"E:\\스터디\\study\\todolist-Basic01_JH\\src\\components\\List.vue","mtime":1585901524000},{"path":"E:\\스터디\\study\\todolist-Basic01_JH\\node_modules\\css-loader\\index.js","mtime":499162500000},{"path":"E:\\스터디\\study\\todolist-Basic01_JH\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"E:\\스터디\\study\\todolist-Basic01_JH\\node_modules\\postcss-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\스터디\\study\\todolist-Basic01_JH\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1584076644000},{"path":"E:\\스터디\\study\\todolist-Basic01_JH\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\r\n.done {\r\n    background-color: rgba(0, 0, 0, 0.1) !important\r\n}\r\n.done p {\r\n    text-decoration: line-through;\r\n    color: rgba(0, 0, 0, 0.5)\r\n}\r\n.edit {\r\n    background-color: rgb(197, 250, 128) !important\r\n}\r\n\r\n",{"version":3,"sources":["List.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"List.vue","sourceRoot":"src\\components","sourcesContent":["<template>\r\n<!-- 수정버튼을 눌렀을때 그 카드가 색깔이 바뀌고, 완료를 누르면 색이 다시 돌아오게 할 수 없을까? -->\r\n<!-- 하나의 레이아웃반복 v-for ,  v-card는 그림자  index:몇번쨰 인지 찾기위해-->\r\n<!-- done이라는 클래스를 하나 설정  list.status 가 done인경우에는 던이라는 클래스가 적용되도록 -->\r\n  <div>   \r\n    <v-card \r\n    class=\"pa-3 mb-3 \"\r\n    :class=\"{'done' : list.status === 'done' , 'edit' : list.mode ==='edit'}\"\r\n    \r\n    v-for=\"(list, index) in todoList\"     \r\n    :key=\"index\"\r\n    >\r\n\r\n        <p>{{ list.memo }}</p>  <!-- 14번index,해당리스트를 찾기위해서 'done' -->\r\n        <v-btn \r\n        v-if=\"list.status === 'created'\"\r\n        @click=\"$emit('statusControl',  index, 'done'), listAdd\"\r\n        fab flat small color=\"blue\" ><i class=\"fas fa-check\"></i></v-btn> \r\n        <!-- 완료 -->\r\n        <v-btn \r\n        v-else\r\n        @click=\"$emit('statusControl',  index, 'created')\"\r\n        fab flat small color=\"orange\" ><i class=\"fas fa-redo-alt\"></i></v-btn>\r\n        <!-- 부활 -->\r\n        <v-btn \r\n        @click=\"$emit('listDelete', index)\"\r\n        fab flat small color=\"red\" ><i class=\"fas fa-trash-alt\"></i></v-btn>\r\n        <!-- 휴지통 -->\r\n        <v-btn \r\n        v-if=\"list.status === 'created'\"\r\n        @click=\"listEdit(list.memo, index, 'edit')\"\r\n        fab flat small color=\"yellow\" ><i class=\"fas fa-edit\"></i></v-btn>\r\n        <!-- 수정 -->\r\n        <v-btn\r\n        v-if=\"list.star === 'none'\"\r\n        @click=\"starOn(index)\"\r\n        :disabled=\"list.display === 'none'\"\r\n        fab flat small color=\"indigo\">\r\n            <i class=\"far fa-star\"></i>\r\n        </v-btn>\r\n        <v-btn\r\n        v-else\r\n        @click=\"starOff(index)\"\r\n        :disabled=\"list.display === 'none'\"\r\n        fab flat small color=\"indigo\">\r\n            <i class=\"fas fa-star\"></i>\r\n        </v-btn>\r\n        <!-- star 아이콘 -->\r\n         <p>\r\n            {{ list.time }}\r\n          </p>\r\n    </v-card>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { eventBus } from '../main.js'\r\nexport default {\r\n    props:['todoList'],\r\n    data(){\r\n        return{\r\n        }\r\n    },\r\n    methods: {\r\n        listEdit(memo, index, mode, display){\r\n            eventBus.listEdit(memo, index, mode, display)\r\n            this.todolist[index].mode = mode\r\n            // this.mode = 'edit'\r\n             \r\n            for (let i=0; i < this.todolist.length; i++) {\r\n                if(this.todolist[i].mode === 'add') {\r\n                  this.todolist[i].display = display\r\n         }\r\n       }\r\n    },\r\n       starOn(index){\r\n          // star 가 채워지지 않은 상태라면 \r\n            this.todolist[index].star = 'block'\r\n            let starOn = this.todolist[index] // 눌려진 star 를 starOn 에 담고\r\n            this.todolist.splice(index, 1) // 실제 배열에서의 눌린 값(starOn 에 담겨진 값)을 지우고\r\n            this.todolist.unshift(starOn) // 담아 둔 starOn 을 배열 맨 앞에 넣는다.\r\n        }\r\n        // starOff(index){\r\n        //   // 눌려진 star 의 불을 끌 때면\r\n        //     //this.todolist[index].star = 'none'\r\n        //     // let starOff = this.todolist[index] // 누른 star 를 starOff 에 담고\r\n\r\n        //     // let star = 0;\r\n        //     // for (let i=0; i < this.todolist.length; i++) {\r\n        //     //   if (this.todolist[i].star === 'block') star++ // 현재 배열에서 불이 켜져있는 것이 몇개인지 확인한 뒤\r\n        //     // }\r\n        //     // this.todolist.splice(index, 1) // 현재 눌린 배열을 지우고\r\n        //     // this.todolist.splice(star, 0, starOff) // 불이 켜져 있는것 다음에 아무것도 지우지 말고(0) 아까 담은 starOff 를 그 뒤에 넣는다.\r\n        // }\r\n    }\r\n}\r\n</script>\r\n\r\n<style>\r\n.done {\r\n    background-color: rgba(0, 0, 0, 0.1) !important\r\n}\r\n.done p {\r\n    text-decoration: line-through;\r\n    color: rgba(0, 0, 0, 0.5)\r\n}\r\n.edit {\r\n    background-color: rgb(197, 250, 128) !important\r\n}\r\n\r\n</style>\r\n\r\n"]}]}