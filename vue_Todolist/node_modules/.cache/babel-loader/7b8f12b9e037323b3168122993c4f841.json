{"remainingRequest":"E:\\스터디\\study\\todolist-Basic01_JH\\node_modules\\babel-loader\\lib\\index.js!E:\\스터디\\study\\todolist-Basic01_JH\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\스터디\\study\\todolist-Basic01_JH\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\스터디\\study\\todolist-Basic01_JH\\src\\components\\Home.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\스터디\\study\\todolist-Basic01_JH\\src\\components\\Home.vue","mtime":1585901908000},{"path":"E:\\스터디\\study\\todolist-Basic01_JH\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1584076644000},{"path":"E:\\스터디\\study\\todolist-Basic01_JH\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\스터디\\study\\todolist-Basic01_JH\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1584076644000},{"path":"E:\\스터디\\study\\todolist-Basic01_JH\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport List from './List.vue';\nimport ListAdd from './ListAdd.vue';\nexport default {\n  components: {\n    List: List,\n    ListAdd: ListAdd\n  },\n  data: function data() {\n    return {\n      todoList: [],\n      toDay: '',\n      nowTime: 0\n    };\n  },\n  computed: {\n    countDone: function countDone() {\n      var count = 0; // this.todoList.forEach(list => {\n      // if( list.status === 'done') count++\n\n      for (var i = 0; i < this.todoList.length; i++) {\n        if (this.todoList[i].status === 'done') count++;\n      }\n\n      return count;\n    }\n  },\n  methods: {\n    listTime: function listTime() {\n      // 리스트를 추가, 수정 했을때 시간을 나타내주는 함수.\n      var hh = new Date().getHours().toString();\n      var mm = new Date().getMinutes().toString();\n      var ss = new Date().getSeconds().toString();\n      return this.nowTime = \" \".concat(hh < 10 ? \"0\".concat(hh) : hh, \":\").concat(mm < 10 ? \"0\".concat(mm) : mm, \":\").concat(ss < 10 ? \"0\".concat(ss) : ss, \" \");\n    },\n    listAdd: function listAdd(memo) {\n      // this.todoList.push({ memo: memo, status: \"created\" , mode: \"add\"})\n      this.todoList.push({\n        memo: memo,\n        status: \"created\",\n        mode: \"add\",\n        display: 'block',\n        star: 'none',\n        time: this.listTime()\n      });\n    },\n    statusControl: function statusControl(index, status) {\n      this.todoList[index].status = status;\n      /* todoList에서 몇번째 인자인지 찾아서 그거의 status가 스테터스 */\n    },\n    listDelete: function listDelete(index) {\n      this.todoList.splice(index, 1);\n      /*  투두리스트에서 몇번째인지 찾아줘 */\n    },\n    listEdit: function listEdit(memo, index, mode, display) {\n      this.todoList[index].memo = memo;\n      this.todoList[index].mode = mode; // edit 이 되었을때 mode 값을 edit > add 로 바꿔줘야 하기 때문에 넘겨주는 mode 값.\n\n      this.todoList[index].time = this.listTime();\n\n      for (var i = 0; i < this.todoList.length; i++) {\n        this.todoList[i].display = display;\n      }\n    },\n    //실시간으로 현재시간을 업데이트 해주는 함수.\n    resetTime: function resetTime() {\n      var _this = this;\n\n      setInterval(function () {\n        var date = new Date();\n        var month = date.getMonth();\n        var todayDate = date.getDate();\n        var day = date.getDay();\n        var week = ['일', '월', '화', '수', '목', '금', '토'];\n        var hours = date.getHours();\n        var minutes = date.getMinutes();\n        var seconds = date.getSeconds();\n        var toDate = \"\".concat(month + 1, \"\\uC6D4 \").concat(todayDate, \"\\uC77C \").concat(week[day], \"\\uC694\\uC77C \") + \"\".concat(hours < 10 ? \"0\".concat(hours) : hours, \":\").concat(minutes < 10 ? \"0\".concat(minutes) : minutes, \":\").concat(seconds < 10 ? \"0\".concat(seconds) : seconds);\n        _this.toDay = toDate;\n      }, 1000);\n    }\n  }\n};",{"version":3,"sources":["Home.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n<v-container>\r\n  <v-layout row wrap>\r\n    <v-flex xs12 text-xs-center>\r\n      <h1>Todo List</h1>\r\n      <p>전체 할일 : {{ todoList.length }}/ 완료된 할일: {{ countDone }}/ 남은 할일: {{ todoList.length - countDone }}</p>\r\n      <p :v-bind=\"resetTime()\">{{ toDay }}</p>\r\n    </v-flex>\r\n    <v-flex xs6 pa-2>\r\n        <!-- @statusControl신호가 오면 \"statusControl\"  실행해줘 -->\r\n      <List\r\n       :todoList=\"todoList\"\r\n       @statusControl = \"statusControl\"\r\n       @listDelete = \"listDelete\"\r\n      ></List>\r\n    </v-flex>\r\n    <v-flex xs6 pa-2>\r\n      <ListAdd\r\n        @listAdd = \"listAdd\"\r\n        @listEdit = \"listEdit\" \r\n      ></ListAdd>\r\n    </v-flex>\r\n  </v-layout>\r\n</v-container>\r\n</template>\r\n\r\n<script>\r\nimport List from './List.vue'\r\nimport ListAdd from './ListAdd.vue'\r\n\r\nexport default {\r\n  components: {\r\n    List, \r\n    ListAdd\r\n  },\r\n  data() {\r\n    return {\r\n      todoList: [],\r\n      toDay: '',\r\n      nowTime:0\r\n    }\r\n  },\r\n  computed: {\r\n    countDone(){\r\n      let count = 0;\r\n      // this.todoList.forEach(list => {\r\n        // if( list.status === 'done') count++\r\n        for (let i = 0; i < this.todoList.length; i++) {\r\n          if(this.todoList[i].status === 'done') count++\r\n      }\r\n      return count;\r\n    }\r\n  },\r\n  methods: {\r\n    listTime(){ // 리스트를 추가, 수정 했을때 시간을 나타내주는 함수.\r\n      let hh = new Date().getHours().toString()\r\n      let mm = new Date().getMinutes().toString()\r\n      let ss = new Date().getSeconds().toString()\r\n\r\n      return this.nowTime = ` ${hh < 10 ? `0${hh}` : hh}:${mm < 10 ? `0${mm}` : mm}:${ss < 10 ? `0${ss}` : ss} `\r\n    },\r\n    listAdd(memo) {\r\n      // this.todoList.push({ memo: memo, status: \"created\" , mode: \"add\"})\r\n      this.todoList.push({ memo: memo, status: \"created\", mode: \"add\", display: 'block', star: 'none', time: this.listTime()})\r\n    },\r\n    statusControl(index, status){\r\n      this.todoList[index].status = status         /* todoList에서 몇번째 인자인지 찾아서 그거의 status가 스테터스 */\r\n    },\r\n    listDelete(index) {\r\n      this.todoList.splice(index, 1 )   /*  투두리스트에서 몇번째인지 찾아줘 */\r\n    },\r\n    listEdit(memo, index, mode, display){\r\n      this.todoList[index].memo = memo\r\n      this.todoList[index].mode= mode\r\n      // edit 이 되었을때 mode 값을 edit > add 로 바꿔줘야 하기 때문에 넘겨주는 mode 값.\r\n      this.todoList[index].time = this.listTime()\r\n\r\n      for (let i = 0; i < this.todoList.length; i++) {\r\n      this.todoList[i].display = display\r\n      }\r\n    },\r\n    //실시간으로 현재시간을 업데이트 해주는 함수.\r\n    resetTime(){\r\n      setInterval(()=>{\r\n        let date = new Date();\r\n        let month = date.getMonth();\r\n        let todayDate = date.getDate();\r\n        let day = date.getDay();\r\n        const week = ['일', '월', '화', '수', '목', '금', '토'];\r\n        let hours = date.getHours();\r\n        let minutes = date.getMinutes();\r\n        let seconds = date.getSeconds();\r\n        let toDate = `${month+1}월 ${todayDate}일 ${week[day]}요일 ` + `${hours < 10 ? `0${hours}` : hours}:${minutes < 10 ? `0${minutes }`  : minutes }:${seconds < 10 ? `0${seconds }`  : seconds }`\r\n        this.toDay = toDate\r\n        }, 1000); \r\n    }\r\n  }\r\n}\r\n</script>"],"sourceRoot":"src\\components"}]}